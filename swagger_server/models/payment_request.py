# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PaymentRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, rental_id: str=None, amount: float=None):  # noqa: E501
        """PaymentRequest - a model defined in Swagger

        :param rental_id: The rental_id of this PaymentRequest.  # noqa: E501
        :type rental_id: str
        :param amount: The amount of this PaymentRequest.  # noqa: E501
        :type amount: float
        """
        self.swagger_types = {
            'rental_id': str,
            'amount': float
        }

        self.attribute_map = {
            'rental_id': 'rentalId',
            'amount': 'amount'
        }
        self._rental_id = rental_id
        self._amount = amount

    @classmethod
    def from_dict(cls, dikt) -> 'PaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PaymentRequest of this PaymentRequest.  # noqa: E501
        :rtype: PaymentRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rental_id(self) -> str:
        """Gets the rental_id of this PaymentRequest.

        ID аренды, за которую производится оплата  # noqa: E501

        :return: The rental_id of this PaymentRequest.
        :rtype: str
        """
        return self._rental_id

    @rental_id.setter
    def rental_id(self, rental_id: str):
        """Sets the rental_id of this PaymentRequest.

        ID аренды, за которую производится оплата  # noqa: E501

        :param rental_id: The rental_id of this PaymentRequest.
        :type rental_id: str
        """
        if rental_id is None:
            raise ValueError("Invalid value for `rental_id`, must not be `None`")  # noqa: E501

        self._rental_id = rental_id

    @property
    def amount(self) -> float:
        """Gets the amount of this PaymentRequest.

        Сумма оплаты  # noqa: E501

        :return: The amount of this PaymentRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this PaymentRequest.

        Сумма оплаты  # noqa: E501

        :param amount: The amount of this PaymentRequest.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount
